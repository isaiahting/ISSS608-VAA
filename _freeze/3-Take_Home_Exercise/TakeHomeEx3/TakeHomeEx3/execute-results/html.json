{
  "hash": "5285103a9f004459f35cdaade36ba80c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 3\"\nauthor: \"Joshua TING\"\ndate: \"May 18, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(jsonlite, tidygraph, ggraph,\n               visNetwork, graphlayouts, ggforce,\n               skimr, tidytext, tidyverse, gganimate,dplyr, lubridate)\n```\n:::\n\n\n## Data Import\n\nIn the code chunk below, fromJSON() of jsonlite package is used to import mc2.json file into R and save the output object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_data <- fromJSON(\"data/mc3/mc3.json\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(mc3_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n## **Wrangling and tidying edges**\n\nextract and wrangle the edges object. (edges look at event (look at time period) and compare with nodes)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges <- as_tibble(mc3_data$links) %>%\n  distinct() #remove duplicate records\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc3_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 75,817\nColumns: 11\n$ start_date          <chr> \"2016-10-29T00:00:00\", \"2035-06-03T00:00:00\", \"202…\n$ type                <chr> \"Event.Owns.Shareholdership\", \"Event.Owns.Sharehol…\n$ `_last_edited_by`   <chr> \"Pelagia Alethea Mordoch\", \"Niklaus Oberon\", \"Pela…\n$ `_last_edited_date` <chr> \"2035-01-01T00:00:00\", \"2035-07-15T00:00:00\", \"203…\n$ `_date_added`       <chr> \"2035-01-01T00:00:00\", \"2035-07-15T00:00:00\", \"203…\n$ `_raw_source`       <chr> \"Existing Corporate Structure Data\", \"Oceanus Corp…\n$ `_algorithm`        <chr> \"Automatic Import\", \"Manual Entry\", \"Automatic Imp…\n$ source              <chr> \"Avery Inc\", \"Berger-Hayes\", \"Bowers Group\", \"Bowm…\n$ target              <chr> \"Allen, Nichols and Thompson\", \"Jensen, Morris and…\n$ key                 <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ end_date            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges$start_date <- \n  as_datetime(mc3_edges$start_date)\n```\n:::\n\n\n### **Correcting date data type**\n\nIn the code chunk below, `as_datetime()` of **lubridate** package is used to convert fields with character date into **POSIXt** format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges$time <- as_datetime(mc3_edges$start_date)\nmc3_edges$\"_last_edited_date\" <- as_datetime(mc3_edges$\"_last_edited_date\")\nmc3_edges$\"_date_added\" <- as_datetime(mc3_edges$\"_date_added\")\nmc3_edges$\"date\" <- as_datetime(\"mc3_edges$start_date\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc3_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 75,817\nColumns: 13\n$ start_date          <dttm> 2016-10-29, 2035-06-03, 2028-11-20, 2024-09-04, 2…\n$ type                <chr> \"Event.Owns.Shareholdership\", \"Event.Owns.Sharehol…\n$ `_last_edited_by`   <chr> \"Pelagia Alethea Mordoch\", \"Niklaus Oberon\", \"Pela…\n$ `_last_edited_date` <dttm> 2035-01-01, 2035-07-15, 2035-01-01, 2035-01-01, 2…\n$ `_date_added`       <dttm> 2035-01-01, 2035-07-15, 2035-01-01, 2035-01-01, 2…\n$ `_raw_source`       <chr> \"Existing Corporate Structure Data\", \"Oceanus Corp…\n$ `_algorithm`        <chr> \"Automatic Import\", \"Manual Entry\", \"Automatic Imp…\n$ source              <chr> \"Avery Inc\", \"Berger-Hayes\", \"Bowers Group\", \"Bowm…\n$ target              <chr> \"Allen, Nichols and Thompson\", \"Jensen, Morris and…\n$ key                 <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ end_date            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ time                <dttm> 2016-10-29, 2035-06-03, 2028-11-20, 2024-09-04, 2…\n$ date                <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n\n\n:::\n:::\n\n\n### **Changing field name**\n\nIn the code chunk below, `rename()` of **dplyr** package is used to change the following fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges <- mc3_edges %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc3_edges$type, \"\\\\.\")\n```\n:::\n\n\nThe code chunk below will be used to find the maximum number of elements in any split\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_elements <- max(lengths(word_list))\n```\n:::\n\n\nThe code chunk below will be used to pad shorter splits with NA values to make them all the same length.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"event\", 1:max_elements)\n```\n:::\n\n\nSince the output above is a matrix, the code chunk below is used to convert word_df into a tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_df <- as_tibble(word_df) %>%\n  select(event2, event3)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges <- mc3_edges %>%\n  cbind(word_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mc3_edges, \"data/rds/mc3_edges.rds\")\n```\n:::\n\n\n## **Wrangling and tidying nodes**\n\n::: callout-warning\n## Warning\n\nThis section mainly focuses on tidying and wrangling text data in the Activities column. For other data checking, tidying and wrangling tasks, please refer to the steps discussed above.\n:::\n\n### **Extracting nodes**\n\nThe code chunk below will be used to extract the *nodes* data.frame of *mc2_data* and parses it as a tibble data.frame called *mc2_nodes*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes <- as_tibble(mc3_data$nodes) %>%\n  distinct()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc3_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 60,520\nColumns: 15\n$ type                <chr> \"Entity.Organization.Company\", \"Entity.Organizatio…\n$ country             <chr> \"Uziland\", \"Mawalara\", \"Uzifrica\", \"Islavaragon\", …\n$ ProductServices     <chr> \"Unknown\", \"Furniture and home accessories\", \"Food…\n$ PointOfContact      <chr> \"Rebecca Lewis\", \"Michael Lopez\", \"Steven Robertso…\n$ HeadOfOrg           <chr> \"Émilie-Susan Benoit\", \"Honoré Lemoine\", \"Jules La…\n$ founding_date       <chr> \"1954-04-24T00:00:00\", \"2009-06-12T00:00:00\", \"202…\n$ revenue             <dbl> 5994.73, 71766.67, 0.00, 0.00, 4746.67, 46566.67, …\n$ TradeDescription    <chr> \"Unknown\", \"Abbott-Gomez is a leading manufacturer…\n$ `_last_edited_by`   <chr> \"Pelagia Alethea Mordoch\", \"Pelagia Alethea Mordoc…\n$ `_last_edited_date` <chr> \"2035-01-01T00:00:00\", \"2035-01-01T00:00:00\", \"203…\n$ `_date_added`       <chr> \"2035-01-01T00:00:00\", \"2035-01-01T00:00:00\", \"203…\n$ `_raw_source`       <chr> \"Existing Corporate Structure Data\", \"Existing Cor…\n$ `_algorithm`        <chr> \"Automatic Import\", \"Automatic Import\", \"Automatic…\n$ id                  <chr> \"Abbott, Mcbride and Edwards\", \"Abbott-Gomez\", \"Ab…\n$ dob                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\nFrom the table above, beside the date data type and inappropriate field name issues we discussed earlier, two additional data issues can be observed. They are:\n\n-   The values in Activities and fish_species_present fields are in **list** data type, which will affect the ability to process and to analyse the data.\n\n-   As shown in the screenshot below, some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).\n\n### **Tidying text field**\n\nIn the code chunk below, `mutate()` of dplyr and `gsub()` of Base R are used to perform the data todying task.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes_tidied <- mc3_nodes %>%\n  mutate(type = gsub(\"[(]\", \"\", type)) %>% \n  mutate(type = gsub(\"\\\"\", \"\", type)) %>%\n  mutate(type = gsub(\"[)]\", \"\", type)) \n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}