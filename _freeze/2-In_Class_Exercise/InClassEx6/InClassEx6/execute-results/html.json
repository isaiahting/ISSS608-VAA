{
  "hash": "fd358932ca4460485f754a89a1e7fa63",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Exercise 6\"\nauthor: \"Joshua TING\"\ndate: \"May 18, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# **Exploring the King James Bible**\n\n**corporaexplorer** can be used to explore not only chronological text collections with document *date* as main organising principle, but any collection of texts. The example used here is the [King James Bible](https://en.wikipedia.org/wiki/King_James_Version).\n\n## **Loading packages**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(stringi, stringr, tidyr, tibble, rvest, corporaexplorer, readr, readtext, tidyverse, quanteda)\n```\n:::\n\n\n## **Before corporaexplorer**\n\n##### **Downloading the King James Bible from Project Gutenberg**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbible <- readr::read_lines(\"http://www.gutenberg.org/cache/epub/10/pg10.txt\")\n```\n:::\n\n\n##### **Pre-processing the text**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Collapsing into one string.\nbible <- paste(bible, collapse = \"\\n\")\n```\n:::\n\n\nIdentifying the beginning and end of the Bible / stripping PJ metadata. Technique borrowed from (https://quanteda.io/articles/pkgdown/replication/digital-humanities.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_v <- stri_locate_first_fixed(bible, \"The First Book of Moses: Called Genesis\")[1]\nend_v <- stri_locate_last_fixed(bible, \"Amen.\")[2]\nbible <- stri_sub(bible, start_v, end_v)\n```\n:::\n\n\nIn the file, every book in the bible is preceded by five newlines, which we use to split our string into a vector where each element is a book.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbooks <- stri_split_regex(bible, \"\\n{5}\") %>%\n    unlist %>%\n    .[-40]  # Removing the heading \"The New Testament of the King James Bible\",\n              # which also was preceded by five newlines.\n```\n:::\n\n\nBecause of the structure of the text in the file: Replacing double or more newlines with two newlines, and a single newline with space.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbooks <- str_replace_all(books, \"\\n{2,}\", \"NEW_PARAGRAPH\") %>%\n    str_replace_all(\"\\n\", \" \") %>%\n    str_replace_all(\"NEW_PARAGRAPH\", \"\\n\\n\")\nbooks <- books[3:68]  # The two first elements are not books\n```\n:::\n\n\nIdentifying new chapters within each book and split the text into chapters.\n\n(The first characters in chapter 2 will e.g. be 2:1)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchapters <- str_replace_all(books, \"(\\\\d+:1 )\", \"NEW_CHAPTER\\\\1\") %>%\n    stri_split_regex(\"NEW_CHAPTER\")\n```\n:::\n\n\nRemoving the chapter headings from the text (we want them as metadata).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchapters <- lapply(chapters, function(x) x[-1])\n```\n:::\n\n\n##### **Metadata**\n\nWe are not quite happy with the long book titles in the King James Bible, so we retrieve shorter versions from esv.org which will take up less \\# space in the corpus map plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbook_titles <- read_html(\"https://www.esv.org/resources/esv-global-study-bible/list-of-abbreviations\") %>%\n  html_nodes(\"td:nth-child(1)\") %>%\n  html_text() %>%\n  .[13:78]  # Removing irrelevant elements after manual inspection.\n```\n:::\n\n\nWe add a column indicating whether a book belongs to the Old or New Testament, knowing that they contain respectively 39 and 27 books.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntestament <- c(rep(\"Old\", 39), rep(\"New\", 27))\n```\n:::\n\n\n##### **Creating data frame with text and metadata**\n\nData frame with one book as one row.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbible_df <- tibble::tibble(Text = chapters,\n                           Book = book_titles,\n                           Testament = testament)\n\nbible_df <- tidyr::unnest(bible_df, Text)\n```\n:::\n\n\nChecking length of vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(chapters)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 66\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(book_titles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 66\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(testament)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 66\n```\n\n\n:::\n:::\n\n\n## **corporaexplorer**\n\nWhen we first have a data frame with text and metadata, creating a “corporaexplorerobject” for exploration is very simple:\n\nAs this is a corpus which is not organised by date, we set `date_based_corpus` to `FALSE`. \\# Because we want to organise our exploration around the books in the Bible, \\# we pass `\"Book\"` to the `grouping_variable` argument. \\# We specify which metadata columns we want to be displayed in the \\# \"Document information\" tab, using the `columns_doc_info` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKJB <- prepare_data(dataset = bible_df,\n                    date_based_corpus = FALSE,\n                    grouping_variable = \"Book\",\n                    columns_doc_info = c(\"Testament\", \"Book\"))\n```\n:::\n\n\nEnsures it is the correct class - corporaexplorer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(KJB)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"corporaexplorerobject\"\n```\n\n\n:::\n:::\n\n\nRun corpus explorer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexplore(KJB)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}